Singly LinkedList

You are required to implement the five other methods in src/linked_list.cpp:
- Deconstructor: Delete and release memory of all nodes.
- Insert: Insert a new node containing the given value and return a pointer to the new node. If the given value already existed, return the pointer containing the given value.
- Find: Find a node containing the given value and return a pointer to the found node. If the given value does not exist, return the NULL pointer.
- Remove: Remove a node containing the given value and return a root pointer of a linked list. If there is no node containing the given value, simply return a root pointer.
- Size: Return the number of nodes in the linked list.

You are required to implement four methods in src/stack.cpp:
- Deconstructor: Delete and release memory of all nodes.
- Push: Push a new node into the tail of a stack.
- Pop: Return a value in tail of the stack and remove this tail node out of the stack. We assume the pop function is only called when the stack is not empty.
- Empty: Return true if the current stack is empty, otherwise, it is false. The stack is empty if and only if both head and tail of the stack point to the NULL pointer.

To compile and run this homework, you are required to install some following packages:
- Make. This is to execute rules to compile your program.
- GCC/G++. This is the C++ compiler.
- OpenCV Library (Optional). This is used to visualize your results.
These tools are all supported on Windows, Linux, and Mac OSX. There will be a document and a 
tutorial to install these tools in our class.

There are two files named Makefile.windows and Makefile.linux. If you are using Windows, 
rename Makefile.windows to Makefile. If you are using Linux or Mac OSX, rename 
Makefile.linux to Makefile. If you do not want to use OpenCV for visualization, open file 
Makefile and edit line OPENCV=1 to OPENCV=0. Please noted that if you are using OpenCV 
4+, you may have to edit lien OPENCV4=0 to OPENCV4=1. To compile the source code, you 
open the terminal and go to the source code folder and type make compile (or mingw32-make 
compile). If you compile successfully, it will give you no errors and output a folder named bin 
that contains the executable file.

To run and test your implementation, using the terminal and type make run (or mingw32-make
run on Windows). If you run successfully and your implementation is correct, you should pass all 
the unit tests designed in the main program. Otherwise, it will yield you an announcement 
indicating which module is not correct